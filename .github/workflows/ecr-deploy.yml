name: Build and Push to ECR

# Caching Strategy:
# This workflow implements a multi-level caching system for faster builds:
# 1. GitHub Actions Cache: Caches pip downloads and wheel files between runs
# 2. Docker BuildKit Cache: Caches Docker layers between builds
# 3. Wheelhouse: Pre-built wheels are saved and reused for heavy dependencies like numpy
#
# Maintenance Notes:
# - All caches are invalidated when backend/requirements.txt changes
# - To force-invalidate caches, increment the cache key version below
# - If GitHub's free tier cache limit (10GB) is reached, oldest caches are automatically purged
# - For debugging cache issues, check the "Cache Python Dependencies" step in workflow runs

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose.yml'
      - '.github/workflows/ecr-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose.yml'
  workflow_dispatch:  # Allows manual triggering

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_BACKEND_REPOSITORY: ${{ vars.ECR_BACKEND_REPOSITORY }}
  ECR_FRONTEND_REPOSITORY: ${{ vars.ECR_FRONTEND_REPOSITORY }}
  S3_DATA_BUCKET: ${{ vars.S3_DATA_BUCKET }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    # Optional: Set up QEMU for multi-platform builds if needed
    # - name: Set up QEMU
    #   uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Cache Python dependencies for faster backend builds
    - name: Cache Python Dependencies
      uses: actions/cache@v3
      id: pip-cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-v1-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-v1-
    
    # Create a pip wheel cache directory to store pre-built wheels
    - name: Set up pip wheel cache
      run: |
        mkdir -p $HOME/.cache/pip/wheels
        mkdir -p backend/wheelhouse
        # Create an empty file to ensure the directory is valid
        touch backend/wheelhouse/.keep
        # Copy any previously cached wheels to wheelhouse
        if [ -d "$HOME/.cache/pip/wheels" ]; then
          cp -r $HOME/.cache/pip/wheels/* backend/wheelhouse/ 2>/dev/null || true
        fi
      
    - name: Build, tag, and push backend image to Amazon ECR
      id: build-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ env.ECR_BACKEND_REPOSITORY }}
        USE_S3_DATA: "true"
        AUTO_UPLOAD_DATA: "true"
      run: |
        # Build the backend Docker image with environment variables for S3 data handling
        docker buildx build \
          --cache-from type=gha,scope=backend-build \
          --cache-to type=gha,scope=backend-build,mode=max \
          --build-arg USE_S3_DATA=$USE_S3_DATA \
          --build-arg AUTO_UPLOAD_DATA=$AUTO_UPLOAD_DATA \
          --build-arg S3_DATA_BUCKET=${{ env.S3_DATA_BUCKET }} \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$REPOSITORY:latest \
          --push \
          --mount=type=cache,target=/root/.cache/pip \
          --mount=type=bind,source=backend/wheelhouse,target=/app/wheelhouse \
          ./backend
        
        # Store built wheels back to the cache
        mkdir -p $HOME/.cache/pip/wheels
        if [ -d "backend/wheelhouse" ] && [ -n "$(ls -A backend/wheelhouse)" ]; then
          echo "Copying wheels back to cache..."
          cp -r backend/wheelhouse/* $HOME/.cache/pip/wheels/ 2>/dev/null || true
        else
          echo "No wheels found to copy back to cache"
        fi
        
        # No need to push separately as buildx with --push flag handles it
        echo "backend-image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # Use Docker's official build-push-action for the frontend with latest version
    - name: Build and push frontend image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_FRONTEND_REPOSITORY }}:latest
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_FRONTEND_REPOSITORY }}:${{ env.IMAGE_TAG }}
        # Optional: Enable caching for faster builds
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Summary
      run: |
        echo "Successfully built and pushed images to ECR"
        echo "Backend image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_BACKEND_REPOSITORY }}:${{ env.IMAGE_TAG }}"
        echo "Frontend image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_FRONTEND_REPOSITORY }}:${{ env.IMAGE_TAG }}" 