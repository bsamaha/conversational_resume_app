services:
  # Backend FastAPI service
  backend:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_BACKEND_REPOSITORY}:latest
    container_name: backend
    volumes:
      - ./data:/app/data  # Mount the data directory for persistent storage
    environment:
      - CHROMA_DB_PATH=/app/data/chroma  # Set ChromaDB path inside the container
      - ENV=production  # Set environment to production - this triggers Parameter Store usage
      - AWS_REGION=${AWS_REGION:-us-east-2}  # Use AWS_REGION from environment or default to us-east-2
      - S3_DATA_BUCKET=${S3_DATA_BUCKET:-conversational-resume}  # S3 bucket for data storage
      - USE_S3_DATA=${USE_S3_DATA:-true}  # Whether to use S3 for data (default: true for production)
      - AUTO_UPLOAD_DATA=${AUTO_UPLOAD_DATA:-false}  # Whether to automatically upload generated data
      # AWS credentials - mapped from Parameter Store values
      - AWS_ACCESS_KEY_ID=${CONVERSATIONAL_RESUME_AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${CONVERSATIONAL_RESUME_AWS_ACCESS_KEY_SECRET}
    restart: unless-stopped
    networks:
      - app-network
    ports:
      - "8000:8000"  # Expose the FastAPI port
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend React service
  frontend:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_FRONTEND_REPOSITORY}:latest
    container_name: frontend
    restart: unless-stopped
    ports:
      - "80:80"  # Expose the frontend on standard HTTP port 80
    environment:
      - REACT_APP_API_URL=http://backend:8000  # Connect to the backend service
    depends_on:
      backend:
        condition: service_healthy  # Wait for backend to be healthy before starting
    networks:
      - app-network

# Shared network for service communication
networks:
  app-network:
    driver: bridge 